Mockito does validate doReturn() to make sure they were all called with a
  value that is compatible with the return type of the method.


Mockito does validate doThrow() to make sure the exception being thrown is
  compatible with the method signature. Aka checked exceptions must be
  assignable to one of the method's checked exceptions.


Mockito does not appear to do any validation on custom Answers when used
  via the doAnswer() model regardless of any generic definitions.



There is nothing in Mockito (Generic wise) to prevent someone from making
  a call like doReturn(100).doReturn("").when(mock). However, when they
  call the mock's method it does validate those objects and throw an error





The call to invoke inside InvocationHandler will always give us a null
  argument array if the method that was invoked has no parameters.


Vararg methods will always report the vararg as a single argument. It
  will always be the last argument. Its parameter type will always be
  an array who's getComponentType will report the actual type. If no
  varargs are given it will be an empty array


So I tried various generic approaches to Answer chaining in an attempt to
  keep the types the same so the following couldn't happen:

  // This I could prevent
  doReturn(100).doReturn("")

  // This I could not prevent
  doThrow(new RuntimeException()).doReturn(100).doReturn("")

  This particular use case was successful, however, it proved to be
  impossible to do across any given chain. As such I abandoned it. Its
  probably why it wasn't done in mockito. It got really hairy when I
  tried to deal with subclasses.
